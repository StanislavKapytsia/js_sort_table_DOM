{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAAM,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAQ,SAAS,aAAa,CAAC,SACjC,EAAiB,EAAE,CAIvB,EAAM,gBAAgB,CAAC,QAAS,SAAC,CAAjC,EAEE,IAAM,EAAW,EAAG,AADN,SAAS,aAAa,CAAC,SACX,gBAAgB,CAAC,OAGvC,EAAE,MAAM,CAAC,OAAO,CAAC,OACnB,CAAA,EAAQ,EAAQ,OAAO,CAAC,EAAE,MAAM,CAAA,EAGlC,IAAM,EAAW,EAAG,EAAM,gBAAgB,CAAC,OAEtC,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IARI,EAQC,EAAA,EAAa,CAAA,CAAA,OAAA,QAAA,CAAA,GAAb,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAsB,CAAtB,IAAM,EAAN,EAAA,KAAA,CAGC,EAAU,AAFK,EAAG,EAAI,gBAAgB,CAAC,MAEpB,CAAC,EAAM,CAAC,WAAW,AAE5B,CAAA,IAAV,GACF,CAAA,EAAU,CAAC,EAAQ,UAAU,CAAC,QAAS,GADzC,EAIA,EAAe,IAAI,CAAC,EACtB,C,C,M,E,CAVK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAgBL,EAAe,IAAI,CAJnB,SAAuB,CAAC,CAAE,CAAC,EACzB,OAAO,EAAI,EAAI,EAAI,EACrB,GAkBA,AAdA,SAAuB,CAAO,CAAE,CAAI,EAClC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAQ,MAAM,CAAE,IAAK,CAEvC,IAAM,EAAK,EAAG,AADJ,CAAO,CAAC,EAAE,CACJ,gBAAgB,CAAC,MAEnB,CAAA,IAAV,GACF,CAAA,CAAI,CAAC,EAAE,CAAG,IAAM,CAAI,CAAC,EAAE,CAAC,cAAc,CAAC,QADzC,EAKA,CAAC,CAAC,EAAM,CAAC,WAAW,CAAG,CAAI,CAAC,EAAE,AAChC,CACF,EAEc,EAAS,GAEvB,EAAiB,EAAE,AACrB","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar table = document.querySelector(\"table\");\nvar tBody = document.querySelector(\"tbody\");\nvar arrayOfContent = [];\n// for recording content Name or Position etc\ntable.addEventListener(\"click\", function(e) {\n    var tryCompareAll = function tryCompareAll(a, b) {\n        return a > b ? 1 : -1;\n    };\n    var replacingData = function replacingData(element, data) {\n        for(var i = 0; i < element.length; i++){\n            var b = element[i];\n            var n = _to_consumable_array(b.querySelectorAll(\"td\"));\n            if (index === 3) data[i] = \"$\" + data[i].toLocaleString(\"en-US\");\n            // used twice, but i dont know, stupid money(\n            n[index].textContent = data[i];\n        }\n    };\n    var tHead = document.querySelector(\"thead\");\n    var headers = _to_consumable_array(tHead.querySelectorAll(\"th\"));\n    var index; // for find content of current element\n    if (e.target.closest(\"th\")) index = headers.indexOf(e.target);\n    var content = _to_consumable_array(tBody.querySelectorAll(\"tr\"));\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = content[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var row = _step.value;\n            var arrayOfTd = _to_consumable_array(row.querySelectorAll(\"td\"));\n            var element = arrayOfTd[index].textContent;\n            if (index === 3) element = +element.replaceAll(/[$,]/g, \"\");\n            arrayOfContent.push(element);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    arrayOfContent.sort(tryCompareAll);\n    replacingData(content, arrayOfContent);\n    arrayOfContent = [];\n});\n\n//# sourceMappingURL=index.12e0abf3.js.map\n","'use strict';\n\nconst table = document.querySelector('table');\nconst tBody = document.querySelector('tbody');\nlet arrayOfContent = [];\n\n// for recording content Name or Position etc\n\ntable.addEventListener('click', (e) => {\n  const tHead = document.querySelector('thead');\n  const headers = [...tHead.querySelectorAll('th')];\n  let index; // for find content of current element\n\n  if (e.target.closest('th')) {\n    index = headers.indexOf(e.target);\n  }\n\n  const content = [...tBody.querySelectorAll('tr')];\n\n  for (const row of content) {\n    const arrayOfTd = [...row.querySelectorAll('td')];\n\n    let element = arrayOfTd[index].textContent;\n\n    if (index === 3) {\n      element = +element.replaceAll(/[$,]/g, '');\n    }\n\n    arrayOfContent.push(element);\n  }\n\n  function tryCompareAll(a, b) {\n    return a > b ? 1 : -1;\n  }\n\n  arrayOfContent.sort(tryCompareAll);\n\n  function replacingData(element, data) {\n    for (let i = 0; i < element.length; i++) {\n      const b = element[i];\n      const n = [...b.querySelectorAll('td')];\n\n      if (index === 3) {\n        data[i] = '$' + data[i].toLocaleString('en-US');\n      }\n      // used twice, but i dont know, stupid money(\n\n      n[index].textContent = data[i];\n    }\n  }\n\n  replacingData(content, arrayOfContent);\n\n  arrayOfContent = [];\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","table","document","querySelector","tBody","arrayOfContent","addEventListener","e","headers","tHead","querySelectorAll","target","closest","index","indexOf","content","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","row","value","element","arrayOfTd","textContent","replaceAll","push","err","return","sort","a","b","replacingData","data","toLocaleString"],"version":3,"file":"index.12e0abf3.js.map"}